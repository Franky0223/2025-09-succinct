use rsa::{
    pkcs8::{DecodePrivateKey, DecodePublicKey},
    RsaPrivateKey, RsaPublicKey,
};
use sp1_sdk::prelude::*;
use sp1_sdk::ProverClient;

/// The ELF we want to execute inside the zkVM.
const RSA_ELF: Elf = include_elf!("rsa-program");

const RSA_2048_PRIV_DER: &[u8] = include_bytes!("rsa2048-priv.der");
const RSA_2048_PUB_DER: &[u8] = include_bytes!("rsa2048-pub.der");
const RSA_3072_PRIV_DER: &[u8] = include_bytes!("rsa3072-priv.der");
const RSA_3072_PUB_DER: &[u8] = include_bytes!("rsa3072-pub.der");
const RSA_4096_PRIV_DER: &[u8] = include_bytes!("rsa4096-priv.der");
const RSA_4096_PUB_DER: &[u8] = include_bytes!("rsa4096-pub.der");

const RSA_2048_E17_PRIV_DER: &[u8] = include_bytes!("rsa2048-e17-priv.der");
const RSA_2048_E17_PUB_DER: &[u8] = include_bytes!("rsa2048-e17-pub.der");
const RSA_3072_E17_PRIV_DER: &[u8] = include_bytes!("rsa3072-e17-priv.der");
const RSA_3072_E17_PUB_DER: &[u8] = include_bytes!("rsa3072-e17-pub.der");
const RSA_4096_E17_PRIV_DER: &[u8] = include_bytes!("rsa4096-e17-priv.der");
const RSA_4096_E17_PUB_DER: &[u8] = include_bytes!("rsa4096-e17-pub.der");

#[tokio::main]
async fn main() {
    // Setup a tracer for logging.
    sp1_sdk::utils::setup_logger();

    // Create a new stdin with the input for the program.
    let mut stdin = SP1Stdin::new();

    let private_key = RsaPrivateKey::from_pkcs8_der(RSA_2048_PRIV_DER).unwrap();
    let public_key = RsaPublicKey::from_public_key_der(RSA_2048_PUB_DER).unwrap();
    println!("2048 bit key (e=65537): {:?} \n\n{:?}", private_key, public_key);
    let private_key = RsaPrivateKey::from_pkcs8_der(RSA_3072_PRIV_DER).unwrap();
    let public_key = RsaPublicKey::from_public_key_der(RSA_3072_PUB_DER).unwrap();
    println!("3072 bit key (e=65537): {:?} \n\n{:?}", private_key, public_key);
    let private_key = RsaPrivateKey::from_pkcs8_der(RSA_4096_PRIV_DER).unwrap();
    let public_key = RsaPublicKey::from_public_key_der(RSA_4096_PUB_DER).unwrap();
    println!("4096 bit key (e=65537): {:?} \n\n{:?}", private_key, public_key);

    let private_key = RsaPrivateKey::from_pkcs8_der(RSA_2048_E17_PRIV_DER).unwrap();
    let public_key = RsaPublicKey::from_public_key_der(RSA_2048_E17_PUB_DER).unwrap();
    println!("2048 bit key (e=17): {:?} \n\n{:?}", private_key, public_key);
    let private_key = RsaPrivateKey::from_pkcs8_der(RSA_3072_E17_PRIV_DER).unwrap();
    let public_key = RsaPublicKey::from_public_key_der(RSA_3072_E17_PUB_DER).unwrap();
    println!("3072 bit key (e=17): {:?} \n\n{:?}", private_key, public_key);
    let private_key = RsaPrivateKey::from_pkcs8_der(RSA_4096_E17_PRIV_DER).unwrap();
    let public_key = RsaPublicKey::from_public_key_der(RSA_4096_E17_PUB_DER).unwrap();
    println!("4096 bit key (e=17): {:?} \n\n{:?}", private_key, public_key);

    let message = b"Hello world!".to_vec();

    let signature_2048: Vec<u8> = vec![
        32, 121, 247, 109, 107, 249, 210, 178, 234, 149, 136, 242, 34, 135, 250, 127, 150, 225, 43,
        137, 241, 39, 139, 78, 179, 49, 169, 111, 200, 96, 183, 227, 70, 15, 46, 227, 114, 103,
        169, 170, 57, 107, 214, 102, 222, 13, 19, 216, 241, 134, 26, 124, 96, 202, 29, 185, 69, 4,
        204, 78, 223, 61, 124, 41, 179, 255, 84, 58, 47, 137, 242, 102, 161, 37, 45, 20, 39, 129,
        67, 55, 210, 164, 105, 82, 214, 223, 194, 201, 143, 114, 99, 237, 157, 42, 73, 50, 175,
        160, 145, 95, 138, 242, 157, 90, 100, 170, 206, 39, 80, 49, 65, 55, 202, 214, 17, 19, 183,
        244, 184, 17, 108, 171, 54, 178, 242, 137, 215, 67, 185, 198, 122, 234, 132, 240, 73, 42,
        123, 46, 201, 19, 197, 248, 9, 122, 16, 86, 67, 250, 237, 245, 43, 199, 65, 62, 153, 160,
        44, 108, 21, 125, 197, 154, 231, 115, 225, 38, 238, 229, 143, 203, 159, 65, 147, 18, 9,
        224, 14, 43, 58, 16, 7, 148, 2, 187, 97, 95, 70, 174, 68, 149, 7, 79, 223, 124, 207, 57,
        214, 242, 126, 2, 7, 3, 198, 202, 26, 136, 237, 106, 205, 11, 227, 120, 162, 104, 22, 167,
        192, 124, 239, 39, 201, 157, 45, 85, 147, 247, 1, 240, 217, 220, 218, 79, 238, 135, 100,
        22, 44, 88, 95, 9, 64, 224, 101, 57, 54, 171, 218, 6, 160, 137, 97, 114, 90, 32, 47, 184,
    ];

    let signature_3072: Vec<u8> = vec![
        0x58, 0x04, 0x90, 0x0d, 0x33, 0x2f, 0xa5, 0xdd, 0x75, 0xb7, 0x76, 0xba,
        0xcb, 0x62, 0xcf, 0xee, 0x5e, 0xe3, 0x6a, 0xf4, 0xef, 0xd5, 0x04, 0x77,
        0xcb, 0x2b, 0xfe, 0xe9, 0xf7, 0x00, 0xb2, 0x75, 0xc4, 0x6c, 0x7d, 0x11,
        0xfe, 0xd7, 0x7e, 0x3e, 0xc6, 0xf4, 0x9d, 0x7f, 0xf4, 0x7d, 0x06, 0x5a,
        0xcc, 0x5f, 0x62, 0x99, 0x12, 0x33, 0x74, 0xb2, 0x81, 0xe3, 0x16, 0x9e,
        0x0c, 0x86, 0xe4, 0x1f, 0x86, 0x40, 0x12, 0x8d, 0x79, 0xab, 0xd3, 0x57,
        0x9c, 0xa3, 0x7e, 0x47, 0xe0, 0xea, 0xaf, 0x2a, 0x8b, 0xfa, 0x06, 0x1a,
        0xc7, 0x33, 0x82, 0xcc, 0x1f, 0x38, 0x8d, 0x54, 0x4a, 0xcc, 0x04, 0xe0,
        0xfe, 0x8a, 0x30, 0x28, 0x4f, 0x96, 0x08, 0xb7, 0x6c, 0x6f, 0xed, 0x8a,
        0x97, 0xcb, 0x48, 0x3c, 0xa5, 0x50, 0xe9, 0x11, 0x08, 0x07, 0x53, 0xf2,
        0x52, 0xd6, 0x1c, 0x3f, 0xc2, 0x70, 0xec, 0x5a, 0x8f, 0x32, 0x5c, 0x14,
        0x97, 0xa5, 0xfd, 0x08, 0x47, 0xcf, 0x39, 0xfa, 0x98, 0x63, 0x46, 0x92,
        0x70, 0x69, 0x23, 0x7e, 0x6b, 0xdb, 0x53, 0x9f, 0xf4, 0xb8, 0xfe, 0xde,
        0x55, 0xb1, 0x8f, 0xa0, 0xc0, 0xed, 0xda, 0xd3, 0xa7, 0x25, 0xce, 0x1f,
        0x87, 0xad, 0x19, 0x82, 0xe1, 0x3c, 0xb9, 0x59, 0xa2, 0xda, 0xd4, 0xc4,
        0x83, 0xf0, 0x43, 0xdb, 0x32, 0x24, 0x1a, 0x2c, 0xd7, 0x8c, 0x0e, 0xab,
        0xae, 0xe0, 0x47, 0xa8, 0x51, 0xd2, 0x10, 0xc2, 0xfd, 0xa0, 0x27, 0x37,
        0xcb, 0x9a, 0xa5, 0x65, 0x20, 0x85, 0x55, 0x34, 0x6f, 0x95, 0x9e, 0x16,
        0x1c, 0xc5, 0x5e, 0x54, 0x27, 0xc0, 0xfe, 0xb4, 0x8b, 0xa4, 0xfc, 0x7d,
        0xe8, 0x42, 0x2a, 0x50, 0x75, 0x1d, 0x4c, 0xbc, 0x54, 0x42, 0xa4, 0x6b,
        0x7a, 0xa8, 0xdd, 0x01, 0xf0, 0x50, 0x60, 0x2e, 0x22, 0x3c, 0x81, 0x3b,
        0x1b, 0xd1, 0xfb, 0xeb, 0xc2, 0xbc, 0x4c, 0xf2, 0x93, 0x94, 0x05, 0xe0,
        0x89, 0x57, 0x16, 0xad, 0xa8, 0xc5, 0x7d, 0xf6, 0xef, 0x03, 0x60, 0x03,
        0xba, 0x57, 0x8b, 0xd1, 0x14, 0x72, 0x0d, 0x51, 0x34, 0x3e, 0x5a, 0xd3,
        0xce, 0x3f, 0x36, 0x82, 0x5a, 0x6d, 0x57, 0xa0, 0xb3, 0x93, 0xc9, 0x14,
        0x19, 0xea, 0xab, 0xc4, 0xf8, 0x8e, 0xb0, 0x83, 0xc6, 0x50, 0x38, 0xe9,
        0x2d, 0x86, 0x5a, 0x52, 0x40, 0x4d, 0x8a, 0xba, 0x47, 0xa4, 0xbe, 0xf3,
        0xac, 0x5c, 0x26, 0xf4, 0x3b, 0xe0, 0x6b, 0x73, 0x8e, 0xc1, 0xf0, 0x3e,
        0x89, 0x37, 0x1f, 0x5e, 0xbd, 0x66, 0x59, 0xa4, 0x63, 0x20, 0x60, 0xac,
        0x60, 0x78, 0xc2, 0x47, 0x4a, 0xd2, 0x7e, 0x78, 0x00, 0x6d, 0x9b, 0x46,
        0x03, 0x9f, 0x43, 0x61, 0xc9, 0x86, 0x2d, 0xc6, 0x80, 0x3e, 0xfe, 0x33,
        0x74, 0x56, 0x6d, 0x03, 0xf9, 0x5a, 0xfe, 0x1c, 0x1f, 0x6a, 0x4c, 0xf4
    ];

    let signature_4096: Vec<u8> = vec![
        0x6a, 0x9a, 0xd6, 0x59, 0x0c, 0x75, 0x24, 0x0b, 0x5e, 0x5d, 0x12, 0x75,
        0x91, 0x27, 0x3a, 0xbb, 0x25, 0xd4, 0x37, 0xa0, 0x78, 0xd6, 0x82, 0x90,
        0xad, 0xe1, 0x46, 0x05, 0xf5, 0xe7, 0xcf, 0x63, 0xd0, 0xc2, 0xcc, 0x55,
        0x75, 0x72, 0x5a, 0x2c, 0x2a, 0xca, 0x8b, 0x0c, 0x58, 0x18, 0x9e, 0x78,
        0x4d, 0xf7, 0x25, 0xda, 0x18, 0x47, 0x97, 0x45, 0x88, 0xf6, 0x4b, 0xc4,
        0xe9, 0x97, 0xdd, 0x6b, 0x58, 0xb1, 0x2b, 0x00, 0x4c, 0x17, 0x7a, 0x34,
        0xb9, 0xf4, 0x1f, 0x8c, 0x34, 0xb5, 0xb8, 0xf1, 0xad, 0xe5, 0xe5, 0x6d,
        0x65, 0x7b, 0x7f, 0x3b, 0x5a, 0xe8, 0x30, 0xd8, 0xe4, 0xb5, 0x92, 0x36,
        0xb6, 0x08, 0x28, 0xed, 0xd3, 0xf3, 0x83, 0x8f, 0xd2, 0xe8, 0x72, 0x3e,
        0xd3, 0xbb, 0xfe, 0x4d, 0xf3, 0x87, 0x30, 0x4a, 0x26, 0x51, 0x73, 0xf0,
        0x97, 0x55, 0x29, 0x01, 0xee, 0x07, 0x43, 0x08, 0xe9, 0x65, 0x69, 0xf6,
        0x62, 0x14, 0xa9, 0x62, 0xa5, 0x33, 0x27, 0xa6, 0x14, 0x51, 0x8f, 0x19,
        0x09, 0xfb, 0xb0, 0xe8, 0x7a, 0xe2, 0x69, 0x54, 0x27, 0xf4, 0xa0, 0xf0,
        0xa1, 0xb2, 0x97, 0x08, 0xed, 0xf8, 0x81, 0xf0, 0xc9, 0x97, 0x28, 0xf8,
        0x66, 0x82, 0xf6, 0x3a, 0xb5, 0xcc, 0x8b, 0xda, 0x5c, 0xb7, 0x34, 0xa6,
        0x84, 0xcd, 0x16, 0x46, 0x17, 0x10, 0x29, 0x3b, 0x06, 0x8c, 0x18, 0x15,
        0xe0, 0xe0, 0xf9, 0x25, 0x14, 0x4c, 0x67, 0x23, 0xf5, 0x16, 0xb5, 0xc8,
        0x1b, 0x4c, 0xec, 0xd5, 0x20, 0xdd, 0xe5, 0x8f, 0x90, 0x27, 0x0c, 0x55,
        0xc4, 0xa2, 0x46, 0x5d, 0xe6, 0xb0, 0xad, 0xf3, 0x5b, 0x68, 0x6f, 0x75,
        0x45, 0x32, 0x48, 0x15, 0x33, 0x4f, 0x3c, 0x66, 0xb1, 0xbb, 0xdd, 0x5a,
        0x7b, 0x71, 0xcd, 0xea, 0x35, 0xd7, 0x0a, 0xbf, 0xda, 0xb2, 0x19, 0xe9,
        0xf7, 0x23, 0x6d, 0x49, 0x4d, 0x5f, 0x0f, 0x41, 0xa0, 0x71, 0x96, 0x89,
        0x68, 0xc2, 0xa5, 0x32, 0xf4, 0xe6, 0xfd, 0x2b, 0xb5, 0x58, 0x6b, 0xf1,
        0x91, 0x94, 0xf5, 0x21, 0x8c, 0x58, 0x0f, 0x91, 0x29, 0x40, 0xc1, 0xc4,
        0x31, 0xaa, 0x3d, 0x19, 0xe3, 0xb8, 0x04, 0xa4, 0x1d, 0x4e, 0xb1, 0x6c,
        0x6d, 0x17, 0x6d, 0xec, 0xd4, 0x35, 0x2c, 0x88, 0x46, 0x28, 0xe4, 0x0d,
        0xc9, 0x0c, 0xe8, 0x74, 0xea, 0x35, 0x30, 0xf0, 0x85, 0xb3, 0xa9, 0x88,
        0xc7, 0x6b, 0x0c, 0xe2, 0x29, 0x19, 0x45, 0x72, 0xd5, 0x5c, 0x11, 0x65,
        0xf0, 0x2b, 0x9c, 0x3b, 0x1a, 0x77, 0x64, 0x93, 0xf7, 0xe3, 0xe0, 0xe0,
        0xd8, 0xa4, 0x8e, 0x85, 0xa3, 0x69, 0xf3, 0x2f, 0x37, 0xb2, 0xf9, 0x76,
        0x30, 0xf8, 0x86, 0x4f, 0xea, 0x56, 0x1f, 0xec, 0x7d, 0x5f, 0x8e, 0x07,
        0x79, 0x76, 0xe7, 0xa3, 0x8e, 0x77, 0x4d, 0xdc, 0xfe, 0xbe, 0xca, 0x29,
        0x07, 0x5e, 0x68, 0x92, 0xc4, 0x08, 0xe8, 0x71, 0x0f, 0xa5, 0x9e, 0x4b,
        0x26, 0x29, 0x0d, 0xc7, 0x3c, 0xc9, 0xab, 0x34, 0x76, 0xa4, 0x3e, 0x5f,
        0xf0, 0x0d, 0x3e, 0x82, 0xf4, 0xf8, 0xfe, 0xb8, 0xe9, 0xf3, 0x86, 0x4e,
        0xce, 0xe3, 0x2c, 0x47, 0x42, 0xb9, 0xdc, 0x59, 0x52, 0x0c, 0xff, 0xb9,
        0xd8, 0x3e, 0xf9, 0x09, 0x89, 0x23, 0xb0, 0xed, 0x6b, 0x7f, 0x6a, 0x78,
        0x7c, 0x2d, 0x3e, 0xe0, 0x2c, 0xab, 0x8d, 0xcf, 0xc0, 0xae, 0xe3, 0xea,
        0x6c, 0xbb, 0x79, 0x9a, 0x39, 0x05, 0xdd, 0xcc, 0xa7, 0x89, 0x68, 0x22,
        0xfb, 0x55, 0xb0, 0xe3, 0xf0, 0xd8, 0xb8, 0x7f, 0x19, 0xd0, 0x53, 0x49,
        0x09, 0xaa, 0xd1, 0xba, 0x51, 0x84, 0x05, 0xf4, 0x80, 0x85, 0x3d, 0x0a,
        0xac, 0x8c, 0x89, 0xf1, 0x16, 0xbf, 0xe0, 0x7e, 0xb0, 0x29, 0x42, 0xa9,
        0xf3, 0x3c, 0x74, 0xa1, 0x85, 0xdc, 0x0e, 0x7c
    ];

    let signature_2048_e17: Vec<u8> = vec![
        0x58, 0xbd, 0x41, 0x8d, 0xd6, 0x40, 0x3d, 0x57, 0x9c, 0xec, 0xab, 0xfe, 0x66, 0x88, 0x65, 0x4d,
        0x8c, 0x22, 0xbf, 0xbd, 0xf8, 0xc9, 0xe5, 0xeb, 0x96, 0x5f, 0xc3, 0x02, 0x07, 0x1d, 0x03, 0x24,
        0xea, 0x58, 0x64, 0xf1, 0x80, 0xa9, 0x1f, 0x2c, 0x19, 0xb0, 0xcf, 0xcf, 0xdd, 0xb1, 0xae, 0xc9,
        0x33, 0xdb, 0x8b, 0xed, 0x35, 0x3b, 0xe9, 0x45, 0x12, 0x4b, 0xc6, 0x40, 0xb2, 0xf9, 0xbe, 0xfb,
        0x2f, 0xe8, 0x20, 0xee, 0xe0, 0xef, 0x4a, 0x4c, 0xdc, 0x3d, 0x59, 0xdf, 0x9a, 0x7a, 0x7f, 0x88,
        0x93, 0xa4, 0xc4, 0xb2, 0x66, 0xc8, 0x65, 0xb4, 0x1a, 0xef, 0x14, 0xa3, 0x92, 0xf0, 0xa3, 0x06,
        0x2a, 0x85, 0xde, 0x11, 0xd6, 0xae, 0x12, 0xd6, 0xa4, 0x0a, 0x77, 0xf4, 0x49, 0x28, 0x10, 0xcb,
        0x01, 0xd7, 0x61, 0xa0, 0x0c, 0x10, 0xd7, 0x80, 0xa0, 0x5b, 0x9d, 0x2d, 0xbf, 0xa7, 0x7c, 0x99,
        0xe2, 0xaa, 0x4e, 0x53, 0x68, 0x01, 0x53, 0x58, 0xb6, 0x68, 0xd7, 0x25, 0xb5, 0xa3, 0xec, 0xaf,
        0x30, 0x50, 0x55, 0x1d, 0x1d, 0x66, 0xf7, 0x65, 0x08, 0x0c, 0x7a, 0x4c, 0x28, 0x3e, 0x74, 0xdf,
        0x19, 0x6b, 0xf6, 0x33, 0x91, 0xa9, 0xae, 0x35, 0x49, 0xf4, 0xd0, 0x26, 0xbe, 0xc5, 0xd5, 0x91,
        0x55, 0xce, 0x2c, 0x83, 0x89, 0xab, 0xbc, 0x70, 0xef, 0xe5, 0x48, 0x4b, 0x30, 0x50, 0xd5, 0x11,
        0xc2, 0x5d, 0x7e, 0x67, 0x1b, 0x9f, 0x5b, 0x9b, 0x67, 0x98, 0x40, 0x1e, 0x27, 0x25, 0xaa, 0x07,
        0x44, 0x62, 0x0e, 0xa8, 0xb3, 0xa8, 0x9b, 0x0c, 0xaf, 0xe5, 0x0c, 0x96, 0x49, 0x22, 0x72, 0x30,
        0x76, 0x48, 0x34, 0xc8, 0x91, 0x8e, 0x08, 0x01, 0xae, 0x58, 0xfb, 0x22, 0x68, 0x59, 0x22, 0xdc,
        0x50, 0xf8, 0x2d, 0x15, 0xb9, 0x70, 0xd1, 0xab, 0x1f, 0x8b, 0x8f, 0x7d, 0x5e, 0x3b, 0x36, 0x0c,
    ];

    let signature_3072_e17: Vec<u8> = vec![
        0x50, 0x4a, 0x3b, 0x70, 0x51, 0xa4, 0x31, 0x02, 0x83, 0xd5, 0xd7, 0x22, 0x67, 0xcb, 0x74, 0x30,
        0x2c, 0x5e, 0x74, 0x29, 0x49, 0xdf, 0x5c, 0x87, 0x03, 0x37, 0xef, 0x9d, 0x82, 0xf8, 0x96, 0xaa,
        0x57, 0x89, 0x51, 0x96, 0x2d, 0x27, 0x77, 0x05, 0x34, 0x7b, 0xc2, 0xcf, 0xa5, 0x87, 0x07, 0x56,
        0xc1, 0x17, 0x37, 0x2c, 0xa9, 0xa5, 0x7c, 0xa4, 0x5e, 0x2d, 0x22, 0x90, 0xcf, 0x35, 0xf6, 0xbd,
        0x15, 0xb6, 0xe7, 0x5c, 0xa3, 0x82, 0x31, 0xb0, 0x78, 0x7b, 0x4d, 0xde, 0xe6, 0x21, 0x83, 0x7b,
        0xe9, 0xf8, 0x3e, 0xaf, 0xf5, 0x8b, 0xc3, 0x02, 0xd7, 0xbf, 0x4f, 0xf4, 0x77, 0x90, 0x05, 0xd5,
        0x46, 0xd5, 0x3a, 0x95, 0x63, 0x38, 0x9c, 0xb4, 0x4f, 0x6c, 0x5f, 0xde, 0x1c, 0xfb, 0x23, 0x12,
        0x69, 0x50, 0xaa, 0x8e, 0x97, 0x8a, 0xf0, 0xd8, 0x61, 0xd3, 0x47, 0xb3, 0xde, 0x84, 0xf7, 0x6b,
        0xe1, 0x3e, 0x75, 0x1a, 0x1b, 0x41, 0x37, 0xd1, 0x6c, 0xf1, 0xcc, 0x38, 0xb8, 0x92, 0x37, 0xa3,
        0xba, 0x07, 0x91, 0x5d, 0xa4, 0x38, 0x89, 0x26, 0xc4, 0x6e, 0xc7, 0xea, 0x4b, 0x32, 0xce, 0xf2,
        0x90, 0xef, 0x5b, 0x41, 0xad, 0x69, 0xd5, 0x45, 0xba, 0xc8, 0x7a, 0x37, 0xc5, 0x95, 0x34, 0x62,
        0x31, 0x09, 0xf7, 0x93, 0x5b, 0x6b, 0x6c, 0x2f, 0xb4, 0xfb, 0x33, 0xc0, 0x00, 0x71, 0xfc, 0x01,
        0x60, 0x85, 0xa2, 0x26, 0x52, 0xe2, 0x1e, 0xae, 0xb8, 0x79, 0xd4, 0x0f, 0xa2, 0x14, 0xdd, 0xbb,
        0x11, 0x60, 0x01, 0xfb, 0x54, 0x9c, 0x89, 0x19, 0xd1, 0x52, 0x1a, 0xec, 0x60, 0x01, 0x63, 0xc5,
        0x27, 0xce, 0x51, 0x88, 0x67, 0xf3, 0x37, 0x1d, 0x1e, 0xe5, 0x72, 0x31, 0x18, 0x81, 0xa6, 0xb4,
        0x0d, 0x88, 0xf0, 0x8b, 0xc7, 0x7a, 0x98, 0xe6, 0xb6, 0x9c, 0xc7, 0xba, 0x3a, 0x7c, 0x5f, 0xa0,
        0xf5, 0xb7, 0x6e, 0xfc, 0x3e, 0xd2, 0x2e, 0x63, 0xda, 0x87, 0xd1, 0x2f, 0xbb, 0xfb, 0xce, 0xeb,
        0x12, 0x08, 0xbe, 0xbc, 0x57, 0x5c, 0x9b, 0xa4, 0x29, 0x0c, 0x79, 0xed, 0x96, 0x1a, 0xbb, 0x39,
        0x20, 0x2b, 0x19, 0x77, 0xc7, 0x24, 0xe2, 0xd4, 0x70, 0x46, 0x4f, 0x05, 0x43, 0x89, 0x12, 0x90,
        0x21, 0x63, 0xb0, 0x57, 0x91, 0x65, 0x6f, 0x41, 0x74, 0x3c, 0x8e, 0xc0, 0xd3, 0x99, 0x0e, 0x99,
        0x68, 0x1b, 0x24, 0xad, 0x6a, 0x8c, 0x5a, 0x5e, 0x5c, 0x04, 0x84, 0x4b, 0x64, 0xbb, 0xb7, 0x44,
        0x02, 0x7e, 0xb1, 0x64, 0x96, 0x7e, 0xe4, 0x77, 0x18, 0x7a, 0xd7, 0xb6, 0x28, 0x0e, 0x52, 0x8b,
        0x81, 0xb7, 0x7f, 0x0d, 0x38, 0x30, 0xc7, 0xe7, 0x15, 0x08, 0xae, 0xd4, 0xf8, 0xde, 0xf6, 0x72,
        0x66, 0xa9, 0xb7, 0x7d, 0xd2, 0xf1, 0x70, 0xe0, 0x80, 0xe5, 0xc6, 0xb5, 0xb4, 0x98, 0x97, 0x0d,
    ];

    let signature_4096_e17: Vec<u8> = vec![
        0x88, 0x5b, 0x61, 0x29, 0x13, 0x61, 0x75, 0x13, 0xef, 0xb1, 0xaa, 0x9d, 0x17, 0x4e, 0xa7, 0x0f,
        0x57, 0x54, 0x6b, 0x8b, 0xaf, 0x67, 0x83, 0xa6, 0x43, 0x27, 0xdd, 0x2a, 0x9e, 0x5e, 0x71, 0x6f,
        0xdb, 0x22, 0xf0, 0x0d, 0x12, 0x04, 0x73, 0x7d, 0xae, 0x61, 0x46, 0xc9, 0xe5, 0x9d, 0xdc, 0x8b,
        0x3a, 0x1c, 0x9f, 0x8f, 0x9c, 0xf9, 0xe8, 0xe0, 0x89, 0xf4, 0x7c, 0x96, 0xa9, 0xfb, 0xbb, 0x13,
        0x23, 0x5d, 0x19, 0xd2, 0x10, 0x79, 0xcb, 0xee, 0x3b, 0x06, 0x2f, 0x2b, 0xa5, 0x35, 0x9f, 0xb8,
        0xfd, 0xf8, 0xfc, 0x4f, 0x22, 0xfe, 0xf2, 0xc4, 0xe5, 0x89, 0x49, 0x23, 0x95, 0xd3, 0xea, 0x5d,
        0x53, 0x6a, 0xfc, 0xf5, 0x20, 0xe2, 0x1b, 0x37, 0x4d, 0x76, 0xec, 0x1e, 0x69, 0x2b, 0x15, 0xfb,
        0x75, 0x74, 0x7b, 0x1f, 0xc4, 0x5c, 0x65, 0xe0, 0x1f, 0x53, 0x99, 0x2c, 0x08, 0xf9, 0xcc, 0xed,
        0x03, 0x14, 0xdb, 0x8c, 0x5d, 0xfa, 0xa9, 0x7d, 0x71, 0xc8, 0x35, 0x77, 0x57, 0xdb, 0x64, 0xc9,
        0x4c, 0x6d, 0x0d, 0x5d, 0xfe, 0x49, 0x79, 0x9c, 0x18, 0x5c, 0xa1, 0xc7, 0xf7, 0xb2, 0x8e, 0x92,
        0x7f, 0xec, 0x62, 0x53, 0x8e, 0x51, 0xa0, 0xb8, 0x44, 0xc4, 0x2c, 0x58, 0xf0, 0x6d, 0xbc, 0x70,
        0x0c, 0xc5, 0x7e, 0x63, 0x38, 0xb4, 0xfd, 0xfd, 0x1e, 0x4e, 0x9b, 0xd3, 0x4b, 0xaa, 0x24, 0x5b,
        0x34, 0xe5, 0xda, 0xc4, 0xe1, 0xa2, 0xfb, 0x49, 0x04, 0x23, 0x27, 0xa0, 0xca, 0x8c, 0x74, 0xde,
        0x84, 0x31, 0x96, 0x04, 0x6e, 0xeb, 0xee, 0xa1, 0x82, 0x83, 0x8e, 0xfa, 0x4c, 0xb3, 0x4e, 0xec,
        0xfe, 0x87, 0xa2, 0x56, 0xd3, 0xb6, 0xa4, 0x60, 0xa3, 0x08, 0xdb, 0xdd, 0xee, 0xb8, 0x74, 0xa7,
        0xc6, 0x0d, 0x2d, 0x7f, 0x31, 0xac, 0x42, 0x65, 0x6f, 0xc1, 0x05, 0xd5, 0xe1, 0x46, 0x10, 0x19,
        0xef, 0x84, 0x84, 0x0e, 0x8f, 0x25, 0x21, 0x2f, 0x9d, 0xf0, 0xd5, 0x50, 0x2d, 0x75, 0xce, 0x4c,
        0xed, 0xa8, 0x3c, 0x9d, 0x5d, 0x34, 0xb4, 0x53, 0xa9, 0xbc, 0xc4, 0x4b, 0xdd, 0x3c, 0x19, 0xd2,
        0x31, 0x85, 0x3e, 0x7f, 0x1a, 0x0c, 0xbc, 0xac, 0x73, 0x0d, 0x17, 0x35, 0x48, 0x46, 0xd2, 0xda,
        0xf0, 0x3a, 0x9d, 0xa4, 0x26, 0x4b, 0x91, 0x42, 0x4c, 0x69, 0xfd, 0xb1, 0xb4, 0x16, 0x3e, 0x4d,
        0x64, 0xb6, 0xbc, 0xb0, 0xb6, 0x8f, 0xbf, 0x7d, 0xfa, 0x5e, 0x96, 0x28, 0xa7, 0x74, 0x1e, 0x5b,
        0xd0, 0xcf, 0xe1, 0xc0, 0x29, 0xd0, 0xc8, 0xda, 0x84, 0xfc, 0x46, 0xc8, 0x02, 0xb2, 0xf4, 0xfd,
        0x38, 0xab, 0xcd, 0xf8, 0x7d, 0x5d, 0x92, 0xf2, 0x71, 0x93, 0x4d, 0x91, 0x2f, 0xee, 0xe3, 0xac,
        0xe0, 0xe0, 0x28, 0x0d, 0x9e, 0xdb, 0xb9, 0x13, 0xef, 0x4d, 0xcc, 0x3e, 0x68, 0xdb, 0xb2, 0x6a,
        0x9d, 0xcd, 0x42, 0xc5, 0xc3, 0xbb, 0x0a, 0x12, 0x30, 0xe7, 0xfa, 0x84, 0xd7, 0xe5, 0x62, 0x51,
        0x56, 0x86, 0x1a, 0xa8, 0x07, 0xbb, 0x78, 0xa5, 0x71, 0x01, 0xd5, 0x01, 0xc6, 0xd2, 0x8a, 0xb2,
        0x7b, 0x67, 0x8b, 0x31, 0xc9, 0xba, 0xc7, 0x1e, 0xfb, 0xe4, 0xd1, 0x53, 0xa6, 0xcc, 0x95, 0xf2,
        0xfe, 0x08, 0x55, 0x67, 0x2b, 0x6e, 0x2e, 0x20, 0xd9, 0x54, 0x9b, 0xab, 0xa0, 0x80, 0xa4, 0x26,
        0xe1, 0x24, 0x78, 0x4b, 0x73, 0x52, 0xbd, 0xa6, 0x14, 0x02, 0x1e, 0x47, 0xcd, 0xe6, 0xfd, 0xf1,
        0x9a, 0xe8, 0x2c, 0x23, 0x44, 0x30, 0xd0, 0x34, 0x67, 0xe7, 0x59, 0x94, 0xa6, 0x15, 0x31, 0x5a,
        0xe7, 0xc3, 0xa0, 0xc3, 0xb7, 0x42, 0x29, 0xe8, 0xa7, 0xb2, 0x93, 0x0f, 0x5b, 0x5a, 0x45, 0xd3,
        0x19, 0x95, 0xd0, 0x6d, 0x9e, 0xa4, 0x8a, 0xb1, 0xb8, 0x68, 0xab, 0xdc, 0x10, 0x63, 0xb7, 0xa9,
    ];

    // Write inputs for program to stdin.
    stdin.write(&RSA_2048_PUB_DER);
    stdin.write(&message);
    stdin.write(&signature_2048);

    stdin.write(&RSA_3072_PUB_DER);
    stdin.write(&message);
    stdin.write(&signature_3072);

    stdin.write(&RSA_4096_PUB_DER);
    stdin.write(&message);
    stdin.write(&signature_4096);

    // Test e=17 keys
    stdin.write(&RSA_2048_E17_PUB_DER);
    stdin.write(&message);
    stdin.write(&signature_2048_e17);

    stdin.write(&RSA_3072_E17_PUB_DER);
    stdin.write(&message);
    stdin.write(&signature_3072_e17);

    stdin.write(&RSA_4096_E17_PUB_DER);
    stdin.write(&message);
    stdin.write(&signature_4096_e17);

    // Instead of generating and verifying the proof each time while developing,
    // execute the program with the RISC-V runtime and read stdout.
    //
    // let mut stdout = SP1Prover::execute(REGEX_IO_ELF, stdin).expect("proving failed");
    // let verified = stdout.read::<bool>();

    // Generate the proof for the given program and input.
    let client = ProverClient::from_env().await;

    let (_, report) = client.execute(RSA_ELF, stdin.clone()).await.unwrap();
    println!("executed program with {} cycles", report.total_instruction_count());

    let pk = client.setup(RSA_ELF).await.expect("setup failed");
    let proof = client.prove(&pk, stdin).await.expect("proving failed");

    // Verify proof.
    client.verify(&proof, pk.verifying_key(), None).expect("verification failed");

    println!("successfully generated and verified proof for the program!")
}
